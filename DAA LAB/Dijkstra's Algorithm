#include <bits/stdc++.h>
using namespace std;

void dijkstra(int n, vector<vector<pair<int, int>>>& adj, int src) {
    // Distance array initialized to infinity
    vector<int> dist(n, INT_MAX);
    dist[src] = 0;

    // Min-heap: {distance, node}
    priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> pq;
    pq.push({0, src});

    while (!pq.empty()) {
        int currentDist = pq.top().first;
        int node = pq.top().second;
        pq.pop();

        // Skip if we already found a shorter path
        if (currentDist > dist[node])
            continue;

        // Relax edges
        for (auto& edge : adj[node]) {
            int neighbor = edge.first;
            int weight = edge.second;

            if (dist[node] + weight < dist[neighbor]) {
                dist[neighbor] = dist[node] + weight;
                pq.push({dist[neighbor], neighbor});
            }
        }
    }

    // Output shortest distances
    cout << "\nShortest distances from source " << src << ":\n";
    for (int i = 0; i < n; i++) {
        if (dist[i] == INT_MAX)
            cout << "Vertex " << i << ": Unreachable\n";
        else
            cout << "Vertex " << i << ": " << dist[i] << "\n";
    }
}

int main() {
    int n, e;
    cout << "Enter number of vertices and edges: ";
    cin >> n >> e;

    vector<vector<pair<int, int>>> adj(n); // adjacency list: node -> [(neighbor, weight)]

    cout << "Enter edges (u v weight):\n";
    for (int i = 0; i < e; i++) {
        int u, v, w;
        cin >> u >> v >> w;
        adj[u].push_back({v, w});
        adj[v].push_back({u, w}); // remove this line if graph is directed
    }

    int src;
    cout << "Enter source vertex: ";
    cin >> src;

    dijkstra(n, adj, src);

    return 0;
}
